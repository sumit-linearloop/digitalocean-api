name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_ID }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -T git@github.com || true
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_HOST }}@${{ secrets.SERVER_IP }} 'echo "SSH connection successful"'

      - name: Clone repository
        run: |
          if [ -d "~/master" ]; then
            rm -rf ~/master
          fi
          git clone git@github.com:sumit-linearloop/digitalocean-api.git ~/master

      - name: Prepare deployment
        run: |
          if [ ! -f "./deploy.sh" ]; then
            echo "‚ùå deploy.sh not found!"
            exit 1
          fi
          chmod +x ./deploy.sh

      - name: Run deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          NODE_ENV: production
        run: |
          echo "üöÄ Starting deployment process..."
          ./deploy.sh
          echo "‚úÖ Deployment completed"

      - name: Verify deployment
        if: success()
        run: |
          echo "Verifying deployment..."
          ssh ${{ secrets.SERVER_HOST }}@${{ secrets.SERVER_IP }} '
            if pm2 list | grep -q "api-server"; then
              echo "‚úÖ API server is running"
              exit 0
            else
              echo "‚ùå API server is not running"
              exit 1
            fi
          '

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          echo "üßπ Cleaned up sensitive files"

      - name: Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
